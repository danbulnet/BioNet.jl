swagger: "2.0"
info:
  description: "Homefy API"
  version: "1.0.0"
  title: "Homefy API"
  # termsOfService: "http://swagger.io/terms/"
  contact:
    email: "dev@homefy.pl"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "homefy.pl"
basePath: "/"
tags:
- name: "estate"
  description: "Operations about real estates"
- name: "investment"
  description: "Operations about investments"
- name: "client"
  description: "Operations about client"
schemes:
- "https"
- "http"
paths:
  /estate/{id}:
    put:
      tags:
      - "estate"
      summary: "real estate was updated/created/deleted - a graph needs update"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "real estate id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "invalid id supplied"
  /investment/{id}:
    put:
      tags:
      - "investment"
      summary: "investment was updated/created/deleted - a graph needs update"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "investment id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "invalid id supplied"
  /investment/{id}/heatmaps:
    get:
      tags:
      - "investment"
      summary: "get list of available heatmaps as list of key - modified timestamp"
      description: ""
      operationId: "heatmaps"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "investment id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              key1:
                type: "integer"
                example: 1652511201
              key2:
                type: "integer"
                example: 1652511486
        "400":
          description: "invalid id supplied"
        "404":
          description: "not found"
  /investment/{id}/heatmap/{key}:
    get:
      tags:
      - "investment"
      summary: "gets heatmap file by investment id and heatmap key"
      description: ""
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "image/jpeg"
      parameters:
      - name: "id"
        in: "path"
        description: "investment id"
        required: true
        type: "integer"
        format: "int64"
      - name: "key"
        in: "path"
        description: "heatmap key"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation - jpg heatmap file"
          schema:
            type: "file"
        "400":
          description: "invalid arguments"
        "404":
          description: "not found"
  /client/{id}:
    put:
      tags:
      - "client"
      summary: "client was updated/created/deleted - a graph needs update"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "client id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "invalid id supplied"
  /client/{id}/profiling:
    post:
      tags:
      - "client"
      summary: "profiling assistant gives a new question id based on previous answers for a given client"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "client id"
        required: true
        type: "integer"
        format: "int64"
      - in: "formData"
        name: "answers"
        description: "Json encoded string - question key-answer list. \nFor first request value will be empty. \nExample: {\"question1\": \"answer A\", \"question2\": \"answer C\"}"
        required: true
        allowEmptyValue: true
        type: string
      responses:
        "200":
          description: "Successful, return next question key to ask. May be empty if system has no more questions."
          schema:
            type: "object"
            properties:
              nextquestion:
                type: "string"
                example: "questionAsdf2"
        "400":
          description: "invalid id supplied or answers parameter"
        "404":
          description: "client not found"
  /client/{id}/matching-estates:
    get:
      tags:
      - "client"
      summary: "find matching real estate for a given client"
      description: ""
      operationId: "estatematching"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "client id"
        required: true
        type: "integer"
        format: "int64"
      - in: "formData"
        name: "filters"
        description: "Json encoded string - filter-value list. \nExample: {\"filterA\": \"value C\", \"FilterB\": \"6\"}"
        required: false
        type: string
      responses:
        "200":
          description: "Return array of estate ids with confidence"
          schema:
            type: "array"
            description: "array of estate matching"
            items:
              $ref: "#/definitions/EstateMatching"
        "400":
          description: "invalid id supplied"
        "404":
          description: "client not found"


definitions:
  EstateMatching:
    type: "object"
    properties:
      estateid:
        type: "integer"
        format: "int64"
        description: "real estate id"
      confidence:
        type: "number"
        format: "double"
        description: "confidence score floating point number between 0 and 1"
        minimum: 0
        maximum: 1
