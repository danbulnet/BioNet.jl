swagger: "2.0"
info:
  description: "Homefy API"
  version: "1.0.0"
  title: "Homefy API"
  # termsOfService: "http://swagger.io/terms/"
  contact:
    email: "dev@homefy.pl"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "homefy.pl"
basePath: "/"
tags:
- name: "estate"
  description: "Operations about real estates"
- name: "investment"
  description: "Operations about investments"
- name: "client"
  description: "Operations about client"
- name: "heatmap"
  description: "Operations about heatmaps"
schemes:
- "https"
- "http"
paths:
  /estate:
    put:
      tags:
      - "estate"
      summary: "update a graph with real estate data"
      description: ""
      operationId: "estateupdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "real estate id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "invalid id supplied"
        "404":
          description: "real estate not found"
  /estate/matching:
    get:
      tags:
      - "estate"
      summary: "find matching real estate for a given client"
      description: ""
      operationId: "estatematching"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clientid"
        in: "query"
        description: "client id"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "filters"
        description: "filter-value filters list"
        required: false
        schema:
          $ref: "#/definitions/Filter"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            description: "array of estate matching"
            items:
              $ref: "#/definitions/EstateMatching"
        "400":
          description: "invalid id supplied"
        "404":
          description: "client not found"
  /investment:
    put:
      tags:
      - "investment"
      summary: "update a graph with investment data"
      description: ""
      operationId: "investmentupdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "investment id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "invalid id supplied"
        "404":
          description: "investment not found"
  /client:
    put:
      tags:
      - "client"
      summary: "update a graph with client data"
      description: ""
      operationId: "clientupdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "client id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "invalid id supplied"
        "404":
          description: "client not found"
  /client/profiling:
    post:
      tags:
      - "client"
      summary: "profiling assistant gives a new question id based on previous answers for a given client"
      description: ""
      operationId: "clientprofiling"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clientid"
        in: "query"
        description: "client id"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "answers"
        description: "question_key-answer list"
        required: true
        schema:
          $ref: "#/definitions/Answer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              nextquestion:
                type: "integer"
                format: "int64"
                description: "question id"
        "400":
          description: "invalid id supplied"
        "404":
          description: "client not found"
  /heatmaps:
    get:
      tags:
      - "heatmap"
      summary: "get all heatmaps for a given investment"
      description: ""
      operationId: "heatmaps"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "investmentid"
        in: "query"
        description: "investment id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            description: "array of heatmaps"
            items:
              $ref: "#/definitions/Heatmap"
        "400":
          description: "invalid id supplied"
        "404":
          description: "investment not found"
  /heatmap:
    get:
      tags:
      - "heatmap"
      #- "investment"
      summary: "get a given heatmap for a given investment"
      description: ""
      operationId: "heatmap"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "investmentid"
        in: "query"
        description: "investment id"
        required: true
        type: "integer"
        format: "int64"
      - name: "heatmapname"
        in: "query"
        description: "heatmap name"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Heatmap"
        "400":
          description: "invalid id supplied"
        "404":
          description: "investment not found"
definitions:
  Filter:
    type: "object"
    additionalProperties:
      type: "string"
    example:
      filterA: "Krak√≥w"
      filterB: "123"
  EstateMatching:
    type: "object"
    properties:
      estateid:
        type: "integer"
        format: "int64"
        description: "real estate id"
      confidence:
        type: "number"
        format: "double"
        description: "confidence score floating point number between 0 and 1"
        minimum: 0
        maximum: 1
  Heatmap:
    type: "object"
    properties:
      name:
        type: "string"
        description: "heatmap name"
      image:
        type: "string"
        description: "base64 encoded image content"
  Answer:
    type: "object"
    additionalProperties:
      type: "string"
    example:
      questionKey1: "Option 1"
      questionAsdf: "Wsad"
